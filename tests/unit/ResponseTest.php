<?php
/**
 * Created by PhpStorm.
 * User: harry
 * Date: 2/14/18
 * Time: 12:02 PM
 */

namespace PhpRestfulApiResponse\Tests\unit;

use PhpRestfulApiResponse\Response;
use PhpRestfulApiResponse\Tests\unit\Lib\Book;

class ResponseTest extends Base
{
    /**
     * @var Response
     */
    private $response;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->response = new Response();
    }

    public function test_withArray()
    {
        /** @var Response $response */
        $response = $this->response->withArray(['status' => 'success'], 200);
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertEquals('{"status":"success"}', $response->getBody()->__toString());
    }

    public function test_withItem()
    {
        /** @var Response $response */
        $response = $this->response->withItem(
            new Book('harry', 'harryosmarsitohang', 'how to be a ninja', 100000, 2017),
            new \PhpRestfulApiResponse\Tests\unit\Lib\Transformer\Book,
            200
        );
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertEquals('{"data":{"title":"how to be a ninja","author":{"name":"harry","email":"harryosmarsitohang"},"year":2017,"price":100000}}', $response->getBody()->__toString());
    }

    public function test_withCollection()
    {
        /** @var Response $response */
        $response = $this->response->withCollection(
            [
                new Book('harry', 'harryosmarsitohang', 'how to be a ninja', 100000, 2017),
                new Book('harry', 'harryosmarsitohang', 'how to be a mage', 500000, 2016),
                new Book('harry', 'harryosmarsitohang', 'how to be a samurai', 25000, 2000),
            ],
            new \PhpRestfulApiResponse\Tests\unit\Lib\Transformer\Book,
            200
        );
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertEquals('{"data":[{"title":"how to be a ninja","author":{"name":"harry","email":"harryosmarsitohang"},"year":2017,"price":100000},{"title":"how to be a mage","author":{"name":"harry","email":"harryosmarsitohang"},"year":2016,"price":500000},{"title":"how to be a samurai","author":{"name":"harry","email":"harryosmarsitohang"},"year":2000,"price":25000}]}', $response->getBody()->__toString());
    }

    public function test_withError()
    {
        /** @var Response $response */
        $response = $this->response->withError('error occured', 400);
        $this->assertEquals(400, $response->getStatusCode());
        $this->assertEquals('{"error":{"http_code":400,"phrase":"Bad Request","message":"error occured"}}', $response->getBody()->__toString());
    }

    public function test_errorNotFound()
    {
        /** @var Response $response */
        $response = $this->response->errorNotFound();
        $this->assertEquals(404, $response->getStatusCode());
        $this->assertEquals('{"error":{"http_code":404,"phrase":"Not Found"}}', $response->getBody()->__toString());
    }

    public function test_errorNotFound_with_message()
    {
        /** @var Response $response */
        $response = $this->response->errorNotFound('go back to home page');
        $this->assertEquals(404, $response->getStatusCode());
        $this->assertEquals('{"error":{"http_code":404,"phrase":"Not Found","message":"go back to home page"}}', $response->getBody()->__toString());
    }

    public function test_errorForbidden()
    {
        /** @var Response $response */
        $response = $this->response->errorForbidden();
        $this->assertEquals(403, $response->getStatusCode());
        $this->assertEquals('{"error":{"http_code":403,"phrase":"Forbidden"}}', $response->getBody()->__toString());
    }

    public function test_errorForbidden_with_message()
    {
        /** @var Response $response */
        $response = $this->response->errorForbidden('forbid to access this');
        $this->assertEquals(403, $response->getStatusCode());
        $this->assertEquals('{"error":{"http_code":403,"phrase":"Forbidden","message":"forbid to access this"}}', $response->getBody()->__toString());
    }

    public function test_errorInternalError()
    {
        /** @var Response $response */
        $response = $this->response->errorInternalError();
        $this->assertEquals(500, $response->getStatusCode());
        $this->assertEquals('{"error":{"http_code":500,"phrase":"Internal Server Error"}}', $response->getBody()->__toString());
    }

    public function test_errorInternalError_with_message()
    {
        /** @var Response $response */
        $response = $this->response->errorInternalError('something wrong');
        $this->assertEquals(500, $response->getStatusCode());
        $this->assertEquals('{"error":{"http_code":500,"phrase":"Internal Server Error","message":"something wrong"}}', $response->getBody()->__toString());
    }

    public function test_errorUnauthorized()
    {
        /** @var Response $response */
        $response = $this->response->errorUnauthorized();
        $this->assertEquals(401, $response->getStatusCode());
        $this->assertEquals('{"error":{"http_code":401,"phrase":"Unauthorized"}}', $response->getBody()->__toString());
    }

    public function test_errorUnauthorized_with_message()
    {
        /** @var Response $response */
        $response = $this->response->errorUnauthorized('token required');
        $this->assertEquals(401, $response->getStatusCode());
        $this->assertEquals('{"error":{"http_code":401,"phrase":"Unauthorized","message":"token required"}}', $response->getBody()->__toString());
    }

    public function test_errorWrongArgs()
    {
        /** @var Response $response */
        $response = $this->response->errorWrongArgs([
            'username' => 'required',
            'password' => 'required'
        ]);
        $this->assertEquals(400, $response->getStatusCode());
        $this->assertEquals('{"error":{"http_code":400,"phrase":"Bad Request","message":{"username":"required","password":"required"}}}', $response->getBody()->__toString());
    }

    public function test_errorGone()
    {
        /** @var Response $response */
        $response = $this->response->errorGone();
        $this->assertEquals(410, $response->getStatusCode());
        $this->assertEquals('{"error":{"http_code":410,"phrase":"Gone"}}', $response->getBody()->__toString());
    }

    public function test_errorGone_with_message()
    {
        /** @var Response $response */
        $response = $this->response->errorGone('mysql gone away');
        $this->assertEquals(410, $response->getStatusCode());
        $this->assertEquals('{"error":{"http_code":410,"phrase":"Gone","message":"mysql gone away"}}', $response->getBody()->__toString());
    }

    public function test_errorMethodNotAllowed()
    {
        /** @var Response $response */
        $response = $this->response->errorMethodNotAllowed();
        $this->assertEquals(405, $response->getStatusCode());
        $this->assertEquals('{"error":{"http_code":405,"phrase":"Method Not Allowed"}}', $response->getBody()->__toString());
    }

    public function test_errorMethodNotAllowed_with_message()
    {
        /** @var Response $response */
        $response = $this->response->errorMethodNotAllowed('GET method is not allowed for this endpoint');
        $this->assertEquals(405, $response->getStatusCode());
        $this->assertEquals('{"error":{"http_code":405,"phrase":"Method Not Allowed","message":"GET method is not allowed for this endpoint"}}', $response->getBody()->__toString());
    }

    public function test_errorUnwillingToProcess()
    {
        /** @var Response $response */
        $response = $this->response->errorUnwillingToProcess();
        $this->assertEquals(431, $response->getStatusCode());
        $this->assertEquals('{"error":{"http_code":431,"phrase":"Request Header Fields Too Large"}}', $response->getBody()->__toString());
    }

    public function test_errorUnwillingToProcess_with_message()
    {
        /** @var Response $response */
        $response = $this->response->errorUnwillingToProcess('Request too size too big');
        $this->assertEquals(431, $response->getStatusCode());
        $this->assertEquals('{"error":{"http_code":431,"phrase":"Request Header Fields Too Large","message":"Request too size too big"}}', $response->getBody()->__toString());
    }

    public function test_errorUnprocessable()
    {
        /** @var Response $response */
        $response = $this->response->errorUnprocessable();
        $this->assertEquals(422, $response->getStatusCode());
        $this->assertEquals('{"error":{"http_code":422,"phrase":"Unprocessable Entity"}}', $response->getBody()->__toString());
    }

    public function test_errorUnprocessable_with_message()
    {
        /** @var Response $response */
        $response = $this->response->errorUnprocessable('Your request cannot be processed');
        $this->assertEquals(422, $response->getStatusCode());
        $this->assertEquals('{"error":{"http_code":422,"phrase":"Unprocessable Entity","message":"Your request cannot be processed"}}', $response->getBody()->__toString());
    }
}